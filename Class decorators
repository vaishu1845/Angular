1) class decorators:- 

They allow us to tell angular a particular class is a component or a module.
the decorator allow us to define this effect without putting any code inside the class.
In this no code is needed in the class to tell angular.we need to decorate it .angular will do rest.

 a)@NgModule:- 

  Every application has atleast one NgModule class,the root module which is conventionally named AppModule and resides in afile named app.module.ts.

  Thsese are the containers for a cohesive block of code dedicated to an application domain,a workflow,or a closely related set of capabilities. 

 >>Properties of @NgModules:-  

   1) Declarations:- The components,directives and pipes that belongs to NgModule.
   
   2) Exports:- The subset of declarations that should be visible and usable in the component templates of other NgModules.

   3) Imports:- Other modules whose exported classes are needed by component templates declared in NgModule.

   4) Providers:- Creators of services that this NgModule contributes to the global collection of services;they become accessible in all parts of application. 

   5)Bootstrap:- The main application view,called the root component,which hosts all other application views.Only the root NgModule should set the bootstrap property.

src/app/app.module.ts:-
  
import { NgModule } from '@angular/core';

  
import { BrowserModule } from '@angular/platform-browser';

  
@NgModule({

  imports:      [ BrowserModule ],

  providers:    [ Logger ],

  declarations: [ AppComponent ],

  exports:      [ AppComponent ],

  bootstrap:    [ AppComponent ]

})

export class AppModule { } 

A root NgModule has no reason to export anything because other modules don't need to import the root NgModule.
   
